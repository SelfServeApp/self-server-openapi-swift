openapi: 3.1.0
info:
  title: Self-Server REST API
  description: Self-Server's REST/HTTP API.
  version: 0.1.2
  license:
    name: Internal
    url: https://valdman.works
servers:
  - url: http://{ip_address}:{port}
    description: Local testing IP address and port number.
    variables:
      ip_address:
        default: 127.0.0.1
        description: Server IP address.
      port:
        default: '8080'
        description: Server port number.
security:
  - active_session_token: []
tags:
  - name: server
    description: Endpoints for interacting and managing the server itself.
  - name: library
    description: Endpoints for interacting with photo libraries (each library refers to a single device's library).
paths:
  /servers:
    get:
      tags:
        - server
      summary: Get server info.
      operationId: getServerInfo
      security:
        - server_control: []
      responses:
        '200':
          description: Returned server info.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerObject'
        '401':
          $ref: '#/components/responses/401UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/GeneralError'
  /libraries:
    get:
      tags:
        - library
      summary: List all libraries in the database.
      operationId: listLibraries
      parameters:
        - name: deviceId
          in: query
          description: Filters returned libraries by the provided deviceId.
          required: false
          schema:
            $ref: '#/components/schemas/UUID'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Library'
        '401':
          $ref: '#/components/responses/401UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/403ForbiddenResponse'
        '500':
          $ref: '#/components/responses/GeneralError'
    post:
      tags:
        - library
      summary: Add new device library.
      operationId: newLibrary
      security:
        - server_control: []
      requestBody:
        $ref: '#/components/requestBodies/NewLibrary'
      responses:
        '201':
          description: New library was created and added to the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Library'
        '400':
          description: Library ID in request is not a valid UUID.
          $ref: '#/components/responses/GeneralError'
        '401':
          $ref: '#/components/responses/401UnauthorizedResponse'
        '409':
          description: Indicates that the new library could not be created, as there is already a library with this name or device ID.
          $ref: '#/components/responses/GeneralError'
        '500':
          $ref: '#/components/responses/GeneralError'
  /libraries/{libraryID}:
    parameters:
      - $ref: '#/components/parameters/LibraryIDPathParam'
    get:
      tags:
        - library
      summary: Get a specific library.
      operationId: getLibrary
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Library'
        '400':
          description: Path parameter not a valid UUID.
          $ref: '#/components/responses/GeneralError'
        '401':
          $ref: '#/components/responses/401UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/403ForbiddenResponse'
        '404':
          description: Library with provided ID could not be found.
          $ref: '#/components/responses/GeneralError'
        '500':
          $ref: '#/components/responses/GeneralError'
  /libraries/{libraryID}/transfer/stream-test:
    post:
      tags:
        - library
      summary: Test endpoint for uploading files.
      operationId: fileUploadTest
      parameters:
        - $ref: '#/components/parameters/LibraryIDPathParam'
        - $ref: '#/components/parameters/RequestIDHeader'
        - $ref: '#/components/parameters/AssetTransferDigestKindHeader'
      requestBody:
        $ref: '#/components/requestBodies/AssetTransfer'
      responses:
        '200':
          $ref: '#/components/responses/AssetTransferResponse'
        '400':
          description: Request content is invalid in some way.
          $ref: '#/components/responses/GeneralError'
        '401':
          $ref: '#/components/responses/401UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/403ForbiddenResponse'
        '500':
          $ref: '#/components/responses/GeneralError'
components:
  securitySchemes:
    server_control:
      type: http
      scheme: basic
      description: A username/password combo used to authenticate requests relating to the server itself, rather than pertaining to a library.
    active_session_token:
      type: http
      scheme: bearer
      description: A token generated at the start of a WebSocket connection with the server, and invalidated when the connection ends.
      bearerFormat: JWT
  schemas:
    ServerObject:
      type: object
      properties: {}
    AbortError:
      type: object
      description: A schema that conforms to Vapor's AbortError type.
      required:
        - error
      properties:
        error:
          type: boolean
          enum:
            - true
        reason:
          type: string
          description: Describes the reason for the error.
    UUID:
      type: string
      format: uuid
      pattern: ^[0-9A-Za-z]{8}-[0-9A-Za-z]{4}-4[0-9A-Za-z]{3}-[89ABab][0-9A-Za-z]{3}-[0-9A-Za-z]{12}$
    LibraryName:
      description: A user-facing name for the library/device.
      type: string
      examples:
        - John's iPhone 14
    LibraryChangeData:
      type: object
      required:
        - token
        - timestamp
      properties:
        token:
          description: A token that refers to the latest state of the on-device library, encoded as base64.
          type: string
          contentEncoding: base64
          externalDocs:
            url: https://developer.apple.com/documentation/photokit/phpersistentchangetoken
        timestamp:
          description: The date and time of the most recent completed library sync.
          type: string
          format: date-time
    Library:
      description: A photo library associated with a specific device.
      type: object
      required:
        - id
        - name
        - deviceId
      properties:
        id:
          description: The unique ID of the library. It's generated by the server upon creation.
          readOnly: true
          $ref: '#/components/schemas/UUID'
        name:
          $ref: '#/components/schemas/LibraryName'
        deviceId:
          $ref: '#/components/schemas/UUID'
        latestChange:
          description: An object describing the latest update state of the on-device library.
          $ref: '#/components/schemas/LibraryChangeData'
    NewLibraryRequestBody:
      type: object
      required:
        - name
        - deviceId
      properties:
        name:
          type: string
        deviceId:
          $ref: '#/components/schemas/UUID'
    AssetDigestKind:
      type: string
      enum:
        - md5
        - sha256
        - sha512
    AssetCompletePart:
      description: A part indicating that all the chunks of a file have been sent, including a digest describing the full contents of the asset transfered.
      type: object
      required:
        - digest
        - digestKind
      properties:
        digest:
          description: A hash digest of the completed asset, with base64 encoding.
          type: string
          contentEncoding: base64
    PHAssetID:
      type: string
      format: phphoto-id
      pattern: ^[0-9A-Za-z]{8}-[0-9A-Za-z]{4}-4[0-9A-Za-z]{3}-[89ABab][0-9A-Za-z]{3}-[0-9A-Za-z]{12}\/[\w]{2}\/\d{3}$
    ContentRangeHeaderValue:
      type: string
      format: contentrange
      pattern: ^(bytes) (\d+-\d+)\/\d+$
      examples:
        - bytes 200-1000/67589
    AssetTransferResponseBody:
      type: object
      required:
        - results
      properties:
        results:
          type: object
          required:
            - succeeded
            - failed
          properties:
            succeeded:
              type: array
              items:
                type: string
            failed:
              type: array
              items:
                type: string
  headers:
    WWWAuthenticate:
      description: Describes the expected authentication.
      required: true
      schema:
        type: string
        examples:
          - Basic realm="server"
          - Bearer iss="self-server:session.token"
    XSelfServerErrorCode:
      description: Self-Server-specific error code.
      required: true
      schema:
        type: integer
    XAssetID:
      required: true
      schema:
        $ref: '#/components/schemas/PHAssetID'
    PartFilename:
      required: false
      schema:
        type: string
  responses:
    401UnauthorizedResponse:
      description: Request is missing authentication.
      headers:
        WWW-Authenticate:
          $ref: '#/components/headers/WWWAuthenticate'
    GeneralError:
      description: A general response for general errors.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AbortError'
      headers:
        X-Self-Server-Error-Code:
          $ref: '#/components/headers/XSelfServerErrorCode'
    403ForbiddenResponse:
      description: Request is not authorized appropriately to access this content.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AbortError'
      headers:
        X-Self-Server-Error-Code:
          $ref: '#/components/headers/XSelfServerErrorCode'
    AssetTransferResponse:
      description: Files were successfully uploaded. Lists asset IDs by whether or it transferred successfully.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AssetTransferResponseBody'
  requestBodies:
    NewLibrary:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NewLibraryRequestBody'
    AssetTransfer:
      description: Body containing library asset data being transferred between client and server.
      required: true
      content:
        multipart/form-data:
          schema:
            type: object
            required:
              - asset_chunk
              - asset_complete
            properties:
              asset_chunk:
                description: A chunk of an asset, as raw data.
                type: array
                items:
                  type: string
                  contentEncoding: binary
              asset_complete:
                $ref: '#/components/schemas/AssetCompletePart'
          encoding:
            asset_chunk:
              contentType: application/octet-stream
              headers:
                X-Asset-ID:
                  description: The ID of the asset this chunk is a part of.
                  $ref: '#/components/headers/XAssetID'
                Content-Range:
                  description: The byte range of the chunk, and its full size.
                  required: true
                  schema:
                    $ref: '#/components/schemas/ContentRangeHeaderValue'
                filename:
                  description: Asset file name.
                  $ref: '#/components/headers/PartFilename'
            asset_complete:
              contentType: application/json
              headers:
                X-Asset-ID:
                  description: The ID of the asset that completed.
                  $ref: '#/components/headers/XAssetID'
                filename:
                  description: Asset file name.
                  $ref: '#/components/headers/PartFilename'
  parameters:
    LibraryIDPathParam:
      name: libraryID
      description: The UUID of a Library in the database.
      in: path
      required: true
      style: simple
      schema:
        $ref: '#/components/schemas/UUID'
    RequestIDHeader:
      name: X-Request-Id
      in: header
      required: false
      description: Defines a unique ID for the request. Should be generated client-side and included if the client wants to keep track of the specific request.
      style: simple
      schema:
        $ref: '#/components/schemas/UUID'
    AssetTransferDigestKindHeader:
      name: X-Digest-Kind
      in: header
      required: true
      description: Specifies the algorithm used to generate digests when transferring assets.
      style: simple
      schema:
        $ref: '#/components/schemas/AssetDigestKind'
